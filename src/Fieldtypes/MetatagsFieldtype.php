<?php


namespace Gioppy\StatamicMetatags\Fieldtypes;


use Gioppy\StatamicMetatags\Metatags;
use Gioppy\StatamicMetatags\Settings;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Statamic\Fields\Fields;
use Statamic\Fields\Fieldtype;

class MetatagsFieldtype extends Fieldtype {

  protected $selectable = true;
  protected $icon = 'angle-brackets-dots';

  public function preProcess($data) {
    if ($data === false) {
      $data = ['enabled' => false];
    }

    return $this->fields()->addValues($data ?? [])->preProcess()->values()->all();
  }

  public function preload() {
    return [
      'fields' => $this->availableFields(),
      'meta' => $this->fields()->meta(),
    ];
  }

  public function process($data) {
    Log::debug('process', ['d' => $data]);
    return parent::process($data); // TODO: Change the autogenerated stub
  }

  public function augment($value) {
    Log::debug('augment', ['v' => $value]);
    return parent::augment($value); // TODO: Change the autogenerated stub
  }

  protected function fields() {
    return new Fields($this->availableFields());
  }

  protected function availableFields() {
    $settings = Settings::make()->values();

    $tags = Metatags::make();
    $fields = collect();

    $features = collect($settings)->except(['site_name', 'site_name_separator'])
      ->collapse()
      ->all();

    foreach ($features as $feature) {
      $method = Str::camel($feature);
      $fields = $fields->merge($tags->$method()->get());
    }

    return $fields->all();
  }
}
